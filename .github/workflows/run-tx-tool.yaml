name: Run tx-tool from ECR

on:
  workflow_dispatch:
    inputs:
      zcash_node_address:
        description: "Zcash node address"
        required: false
        default: "dev.zebra.zsa-test.net"
      zcash_node_port:
        description: "Zcash node port"
        required: false
        default: "18232"
      zcash_node_protocol:
        description: "Zcash node protocol"
        required: false
        default: "http"
      image_tag:
        description: "Docker image tag"
        required: false
        default: "latest"
  schedule:
    - cron: "0 */2 * * *" # Runs every 2 hours

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  run-container:
    name: Run Container from ECR
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Print initial configuration values
        run: |
          echo "Initial Configuration Values:"
          echo "ZCASH_NODE_ADDRESS: ${{ github.event.inputs.zcash_node_address }}"
          echo "ZCASH_NODE_PORT: ${{ github.event.inputs.zcash_node_port }}"
          echo "ZCASH_NODE_PROTOCOL: ${{ github.event.inputs.zcash_node_protocol }}"
          echo "IMAGE_TAG: ${{ github.event.inputs.image_tag }}"

      - name: Set default values if not set
        id: set-defaults
        run: |
          echo "ZCASH_NODE_ADDRESS=${{ github.event.inputs.zcash_node_address || 'dev.zebra.zsa-test.net' }}" >> $GITHUB_ENV
          echo "ZCASH_NODE_PORT=${{ github.event.inputs.zcash_node_port || '18232' }}" >> $GITHUB_ENV
          echo "ZCASH_NODE_PROTOCOL=${{ github.event.inputs.zcash_node_protocol || 'http' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag || 'latest' }}" >> $GITHUB_ENV
          echo "::set-output name=image_tag::${{ github.event.inputs.image_tag || 'latest' }}"

      - name: Print updated configuration values
        run: |
          echo "Updated Configuration Values:"
          echo "ZCASH_NODE_ADDRESS: $ZCASH_NODE_ADDRESS"
          echo "ZCASH_NODE_PORT: $ZCASH_NODE_PORT"
          echo "ZCASH_NODE_PROTOCOL: $ZCASH_NODE_PROTOCOL"
          echo "IMAGE_TAG: $IMAGE_TAG"

      - name: Pull Docker image from ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Run Docker container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker run \
            -e ZCASH_NODE_ADDRESS="$ZCASH_NODE_ADDRESS" \
            -e ZCASH_NODE_PORT="$ZCASH_NODE_PORT" \
            -e ZCASH_NODE_PROTOCOL="$ZCASH_NODE_PROTOCOL" \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Notify Slack
        if: always() # Ensures this step runs regardless of success or failure of previous steps
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "tx-tool"
          SLACK_MESSAGE: "Finished running tx-tool"
          SLACK_MESSAGE_ON_SUCCESS: "âœ… Docker run completed successfully with Docker tag '${{ steps.set-defaults.outputs.image_tag }}'."
          SLACK_MESSAGE_ON_FAILURE: "ðŸš¨ Docker run failed with Docker tag '${{ steps.set-defaults.outputs.image_tag }}'. Check logs in Github for details."
          SLACK_COLOR: ${{ job.status }}
