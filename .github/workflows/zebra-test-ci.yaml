# CI Workflow to test tx-tool against a locally built Zebra node
# This workflow clones the zebra repo at a specific branch, builds the Zebra Docker image, and tests tx-tool against it.
# The workflow ensures tx-tool works correctly by spinning up a Zebra container
# and running the tx-tool from the current branch against it in a Docker network.
# Triggers: push to main, pull requests, and manual runs via workflow_dispatch.
# Please note that the selected Zebra branch should be a branch containing the testnet-single-node-deploy directory with a "dockerfile" and "regtest-config.toml" file in it.

# Please note that the selected Zebra branch should be a branch containing the testnet-single-node-deploy directory with a "dockerfile" and "regtest-config.toml" file in it.

name: Check tx-tool against Zebra

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout tx-tool code
        uses: actions/checkout@v3
        with:
          path: tx-tool

      - name: Checkout Zebra code
        uses: actions/checkout@v3
        with:
          repository: QED-it/zebra
          ref: arseni-adjust-dockerfiles # ${{ vars.ZEBRA_BRANCH_TO_TEST || 'zsa-integration-demo' }} # The branch in Zebra we want to test against
          path: zebra

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Zebra Node
        uses: docker/build-push-action@v4
        with:
          context: zebra/testnet-single-node-deploy
          file: zebra/testnet-single-node-deploy/dockerfile
          tags: zebra-node:local
          push: false
          load: true

      - name: Create Docker network and run Zebra Node container
        run: |
          # Create a network to connect the containers
          docker network create zcash-net
          
          # Run Zebra node connected to the network
          docker run -d --name zebra-node --network zcash-net -p 18232:18232 zebra-node:local
          
          # Wait for the node to start up and be ready
          echo "Waiting for Zebra node to initialize..."
          sleep 30
          
          # Wait for the RPC endpoint to be available
          echo "Waiting for Zebra RPC endpoint to be ready..."
          for i in {1..60}; do
            if docker run --rm --network zcash-net alpine nc -z zebra-node 18232; then
              echo "Zebra RPC endpoint is ready!"
              break
            fi
            echo "Attempt $i: Zebra RPC endpoint not ready yet, waiting..."
            sleep 5
          done
          
          echo "Finished waiting for Zebra node..."
          
          # Debug: Check if containers are running and network connectivity
          echo "=== Debug Information ==="
          echo "Docker containers:"
          docker ps -a
          echo "Docker networks:"
          docker network ls
          echo "Zebra node logs:"
          docker logs zebra-node
          echo "Testing network connectivity from host:"
          docker run --rm --network zcash-net alpine nslookup zebra-node
          echo "Testing port connectivity:"
          docker run --rm --network zcash-net alpine nc -zv zebra-node 18232

      - name: Build tx-tool
        uses: docker/build-push-action@v4
        with:
          context: tx-tool
          file: tx-tool/Dockerfile
          tags: zcash-tx-tool:local
          push: false
          load: true

      - name: Run tx-tool for test-orchard-zsa and verify success
        run: |
          # Debug: Test connectivity before running tx-tool
          echo "=== Pre-run connectivity test ==="
          docker run --rm --network zcash-net alpine nslookup zebra-node
          docker run --rm --network zcash-net alpine nc -zv zebra-node 18232
          
          # Run the tx tool and capture exit code
          docker run --network zcash-net \
            -e ZCASH_NODE_ADDRESS=zebra-node \
            -e ZCASH_NODE_PORT=18232 \
            -e ZCASH_NODE_PROTOCOL=http \
            --name zcash-tx-tool \
            zcash-tx-tool:local test-orchard-zsa

          echo "Printing container logs:"
          docker logs zcash-tx-tool

          # Get the exit code from the container
          EXIT_CODE=$(docker inspect zcash-tx-tool --format='{{.State.ExitCode}}')

          # Clean up
          docker rm zcash-tx-tool

          # Check if the tx_tool succeeded
          if [ $EXIT_CODE -eq 0 ]; then
            echo "tx-tool completed successfully!"
            exit 0
          else
            echo "tx-tool failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Run tx-tool again for test-three-party and verify success
        run: |
          # Debug: Test connectivity before running tx-tool
          echo "=== Pre-run connectivity test ==="
          docker run --rm --network zcash-net alpine nslookup zebra-node
          docker run --rm --network zcash-net alpine nc -zv zebra-node 18232
          
          # Run the tx tool and capture exit code
          docker run --network zcash-net \
            -e ZCASH_NODE_ADDRESS=zebra-node \
            -e ZCASH_NODE_PORT=18232 \
            -e ZCASH_NODE_PROTOCOL=http \
            --name zcash-tx-tool \
            zcash-tx-tool:local test-three-party

          echo "Printing container logs:"
          docker logs zcash-tx-tool

          # Get the exit code from the container
          EXIT_CODE=$(docker inspect zcash-tx-tool --format='{{.State.ExitCode}}')

          # Clean up
          docker rm zcash-tx-tool

          # Check if the tx_tool succeeded
          if [ $EXIT_CODE -eq 0 ]; then
            echo "tx-tool completed successfully!"
            exit 0
          else
            echo "tx-tool failed with exit code $EXIT_CODE"
            exit 1
          fi
